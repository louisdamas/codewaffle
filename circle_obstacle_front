import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan

def lidar_callback(data):
    global velocity_msg, obstacle_detected

    # Déterminer les indices correspondant à l'avant du robot
    # Cela dépend de la configuration du LIDAR. 
    # Pour un LIDAR à 360 degrés, les angles frontaux pourraient être dans un arc de +/- 30 degrés.
    angle_frontal_min = -30.0 / 180.0 * 3.14  # Conversion en radians
    angle_frontal_max = 30.0 / 180.0 * 3.14  # Conversion en radians
    index_min = int((angle_frontal_min - data.angle_min) / data.angle_increment)
    index_max = int((angle_frontal_max - data.angle_min) / data.angle_increment)

    # Corriger les indices si nécessaire
    index_min = max(0, min(index_min, len(data.ranges) - 1))
    index_max = max(0, min(index_max, len(data.ranges) - 1))

    # Vérifier si un obstacle est détecté à l'avant dans la plage spécifiée
    obstacle_detected = any(0.2 <= distance < 0.5 for distance in data.ranges[index_min:index_max] if distance is not None)

def main():
    global velocity_msg, obstacle_detected
    obstacle_detected = False

    # Initialiser un nœud ROS
    rospy.init_node('circle_movement')

    # Créer un publisher pour les commandes de vitesse
    pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
    rate = rospy.Rate(10)  # 10 Hz

    # Définir la vitesse et le rayon du cercle
    velocity_msg = Twist()
    velocity_msg.linear.x = 0.2  # Vitesse linéaire (m/s)
    velocity_msg.angular.z = 0.5  # Vitesse angulaire (rad/s)

    # Souscrire au topic LIDAR
    rospy.Subscriber('/scan', LaserScan, lidar_callback)

    # Boucle principale
    try:
        while not rospy.is_shutdown():
            if obstacle_detected:
                # Arrêter le robot si un obstacle est détecté
                velocity_msg.linear.x = 0
                velocity_msg.angular.z = 0
            else:
                # Sinon, continuer à avancer en cercle
                velocity_msg.linear.x = 0.2
                velocity_msg.angular.z = 0.5

            pub.publish(velocity_msg)
            rate.sleep()
    finally:
        # Pour arrêter le robot, envoyez une vitesse nulle
        velocity_msg.linear.x = 0
        velocity_msg.angular.z = 0
        pub.publish(velocity_msg)

if __name__ == '__main__':
    main()
